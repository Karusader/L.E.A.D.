function doGet(e) {
  // Serve the HTML or respond with data
  return ContentService.createTextOutput("Web App is working!");
}

// Function to handle POST requests
function doPost(e) {
  try {
    //var input = JSON.parse(e.postData.Content);
    var input = e.parameter.partNumber;
    //var partNumber = input.partNumber;
    var partNumber = input;

    Logger.log("Received part number: " + partNumber);

    if (!partNumber) {
      return ContentService.createTextOutput(
        JSON.stringify({ error: partNumber })
      ).setMimeType(ContentService.MimeType.JSON);
    }

    var productInfo = getProductInfo(partNumber);

    // Check if Products array exists and has items
    if (productInfo && productInfo.Products && productInfo.Products.length > 0) {
      var part = productInfo.Products[0];
      var partType = productInfo.Products[0].Category.Name;
      
      // Check if pricing data exists
      /*if (!part.ProductPricings || part.ProductPricings.length === 0) {
        
      }*/

      var response = {
        partNumber: partNumber || "N/A",
        manufacturerPartNumber: part.ManufacturerProductNumber || "N/A",
        location: "N/A",
        count: 0,
        type: partType || "N/A",
        price: part.UnitPrice || "N/A",
        description: part.Description.ProductDescription || "N/A",
        photoUrl: part.PhotoUrl || "N/A",
        datasheetUrl: part.DatasheetUrl || "N/A",
        productUrl: part.ProductUrl || "N/A"
      };

      return ContentService.createTextOutput(JSON.stringify(response))
        .setMimeType(ContentService.MimeType.JSON);
    }
  } catch (err) {
    return ContentService.createTextOutput(
      JSON.stringify({ error: "Error processing request: " + err.message })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}

// Function to get OAuth token
function getOAuthToken() {
  var scriptProperties = PropertiesService.getScriptProperties();
  var cachedToken = scriptProperties.getProperty('cachedToken');
  var tokenExpiration = scriptProperties.getProperty('tokenExpiration');
  var currentTime = Math.floor(Date.now() / 1000); // current time in seconds

  if (cachedToken && tokenExpiration && currentTime < parseInt(tokenExpiration)) {
    Logger.log('Using stored token: ' + cachedToken);
    return cachedToken;
  }

  var clientId = '';  // Your Client ID
  var clientSecret = '';  // Your Client Secret
  var authUrl = 'https://api.digikey.com/v1/oauth2/token';

  var authPayload = {
    'client_id': clientId,
    'client_secret': clientSecret,
    'grant_type': 'client_credentials',
    'scope': 'order_support' // Add this line
  };

  var authHeaders = {
    'Content-Type': 'application/x-www-form-urlencoded'
  };

  try {
    var authResponse = UrlFetchApp.fetch(authUrl, {
      'method': 'post',
      'headers': authHeaders,
      'payload': authPayload,
      'muteHttpExceptions': true  // Capture full error message
    });

    if (authResponse.getResponseCode() == 200) {
      var jsonResponse = JSON.parse(authResponse.getContentText());
      var newToken = jsonResponse.access_token;
      var expiresIn = parseInt(jsonResponse.expires_in);
      var newExpiration = currentTime + expiresIn;

      scriptProperties.setProperty('cachedToken', newToken);
      scriptProperties.setProperty('tokenExpiration', newExpiration.toString());

      Logger.log('New OAuth Token: ' + newToken);
      return newToken;
    } else {
      Logger.log('Error fetching OAuth token: ' + authResponse.getContentText());
      return null;
    }

  } catch (e) {
    Logger.log('Exception fetching OAuth token: ' + e.toString());
    return null;
  }
}

// Function to get product pricing and details from DigiKey
function getProductInfo(partNumber) {
  var token = getOAuthToken();
  if (!token) {
    Logger.log('Unable to fetch OAuth token, skipping request.');
    return null;
  }
  Logger.log(token);

  // Correct V4 API endpoint for keyword search
  var apiUrl = 'https://api.digikey.com/products/v4/search/keyword';

  var headers = {
    'Authorization': 'Bearer ' + token,
    'X-DIGIKEY-Client-Id': '', // your client ID!
    'Content-Type': 'application/json',
    'X-DIGIKEY-Locale-Site': 'US', // Required for V4
    'X-DIGIKEY-Locale-Language': 'en', // Required for V4
    'X-DIGIKEY-Locale-Currency': 'USD'
  };
  
  var payload = {
    Keywords: partNumber,
    RecordCount: 1,
    RecordStartPosition: 0,
    Filters: {} // Optional filters
  };

  try {
    var response = UrlFetchApp.fetch(apiUrl, {
      'method': 'post',
      'headers': headers,
      'payload': JSON.stringify(payload),
      'muteHttpExceptions': true
    });

    Logger.log('API Response: ' + response.getContentText());

    if (response.getResponseCode() === 200) {
      var productInfo = JSON.parse(response.getContentText());
      return productInfo;
    } else {
      Logger.log('Error: ' + response.getContentText());
      return null;
    }
  } catch (e) {
    Logger.log('Error: ' + e.toString());
    return null;
  }
}

// Test function for hardcoded part number
function testHardcodedPart() {
  var partNumber = "CRCW040210K0FKED";
  var productInfo = getProductInfo(partNumber);
  Logger.log("Product Info: " + JSON.stringify(productInfo, null, 2));
}
